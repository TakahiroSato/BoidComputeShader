// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct BoidState
{
    float3 position;
    float3 forward;
    float3 color;
    float3 angle;
    float size;
};

struct AudioState
{
    float spectram;
    float frequencey;
};

RWStructuredBuffer<BoidState> boidBuffer; // C#からデータを受け取る
RWStructuredBuffer<AudioState> audioBuffer;

uint numBoids;
uint fftResolution;
float deltaTime;
half separationWeight;
half alignmentWeight;
half targetWeight;
half moveSpeed;
float3 targetPosition;

float3 pos;

float3 normalizeSafe(float3 v)
{
    return length(v) > 0 ? normalize(v) : 0;
}

[numthreads(32,1,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint boidIndex = id.x;
    BoidState boidSelf = boidBuffer[boidIndex];

    int i = fftResolution - (boidIndex / (numBoids / fftResolution));
    AudioState audio = audioBuffer[i];

    float volume;
    for (uint i = 0; i < fftResolution; ++i)
    {
        volume += audioBuffer[i].spectram;
    }
    
    // boidSelf.position.y = audio.spectram * (200 + (fftResolution-i));
    // boidSelf.position.y += (boidIndex % fftResolution) / fftResolution;

    boidSelf.position.y = audio.spectram * ((boidIndex % fftResolution) / 30);

    float3 pos = boidSelf.position;
    boidSelf.color = float3(pos.x / 500 ,pos.y / 20, i * audio.spectram / fftResolution) * volume / 10;

    boidBuffer[boidIndex] = boidSelf;
}
